# -*- coding: utf-8 -*-
"""Apriori.ipynb adlı dosyanın kopyası

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kAPBFTv5vB1rKMQ2DhZXDpeEQZVtuDmS

Drive ile bağlantı kurdum.
"""

'''from google.colab import drive
   drive.mount("/content/drive")'''

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pickle
import streamlit as st

"""Veri setini koda çekiyorum."""
def main(islem,guven,destek):
    secilenislem=islem
    hamveri=pd.read_csv("C:/Users/lenovo/OneDrive/Masaüstü/Apriori1/retail_dataset.csv",sep=",")
    #hamveri.head()
    
    kolon_adlari=(hamveri["0"].unique())
    #kolon_adlari
    
    #hamveri.isna().sum()
    
    encoded_vals=[]
    for index,row in hamveri.iterrows():
      labels={}
      uncommons=list(set(kolon_adlari) - set(row))
      commons=list(set(kolon_adlari).intersection(row))
      for uc in uncommons:
        labels[uc]=0
      for com in commons:
        labels[com]=1
      encoded_vals.append(labels)
    
    ohe_hamveri=pd.DataFrame(encoded_vals)
    #ohe_hamveri
    
    """Müşterilerin "yumurta" adlı ürünü kaç kere aldığını görelim."""
    
    def urun_nekadar_satilmis(urun):
       return ohe_hamveri[urun][ohe_hamveri[urun]>0].sum()
    
    #deger=urun_nekadar_satilmis("Yumurta")
    #deger
    
    def satis_miktarlari():
      return ohe_hamveri[kolon_adlari][ohe_hamveri[kolon_adlari]>0].sum()
    
    #miktar=satis_miktarlari()
    #miktar
    
    #miktar=pd.DataFrame(miktar,dtype=int)
    #miktar.columns=["Miktar"]
   # miktar
    
    #plt.style.use('dark_background')
    #plt.plot(miktar, label = 'miktar',marker = 'X')
    #plt.legend()
    
    """Apriori uygulaması adımları
    - her ürünün frekansı(tekrar sayısı bulunur)
    -support değeri hesaplanır
    """
    
    '''pip install mlxtend'''
    
    """Ögeler arası birliktelik destek ve güven değerleri ile hesaplanır.
    Destek ögeler arası bağıntının ne kadar sık olduğunu gösterir.
    X ürününün destek değeri, tüm alışverişler içinde X'in oranıdır.
    Destek X= X/ toplam alışveriş eder.
    İki veya daha fazla ürünün desteği örn. destek (x,y)=x,y sayısı/ toplam alışveriş
    
    Minimum destek değerini hesaplıyorum.
    """
    
    from re import VERBOSE
    from mlxtend.frequent_patterns import apriori , association_rules
    frekans_degeri=apriori(ohe_hamveri,min_support=0.2,use_colnames=True)#,verbose=1 bu artık desteklenmiyor, amacı ayrıntılı göstermekti
    
    #frekans_degeri
    """Güven(confidence) kriteri ise Y ürününün hangi sıklıkla X ile beraber olduğunu gösterir.Güven(X,Y)=x,y sayısı/ x'i içeren her alışveriş sayısı"""
    
    solve = association_rules(frekans_degeri, metric = "confidence", min_threshold = 0.6)
    #Gerekli kolonları almak için yazdım
    uyum_degerleri=pd.DataFrame(solve[['antecedents', 'consequents', 'support', 'confidence']])
    #uyum_degerleri
    
    
    
    #işlemlere göre heh heh
    # Destek değeri 0.45'ten yüksek olanları göster.
    def destege_gore_filtreleme(deger):
      return frekans_degeri["itemsets"][frekans_degeri["support"]>deger]
    #destege_göre_filtreleme(0.45)
    
    # Tek veya birlikte ürün kombinasyonları ortalama 0.25 destek değerine sahip.
    #frekans_degeri["support"].plot.box()
    
    #solve
    
    #solve["confidence"].plot.box()
    
    #Güven değerine göre filtreleme
    def guvene_gore_filtreleme(deger):
       return solve[solve["confidence"]>deger]
    #guvene_gore_filtreleme(0.8)
    
       
    ##İkili filtreleme için (hem güven hem destek değerleri)
    def ikili_filtreleme(guven_degeri,destek_degeri):
       return pd.DataFrame(solve[(solve["confidence"]>guven_degeri) & (solve["support"]>destek_degeri)])
    
    #ikili_filtreleme(0.6,0.3)'''

    if secilenislem=="ikili_filtreleme":
        sonuc=ikili_filtreleme(guven,destek)
    
        
    return sonuc
    
